From 444e1cf9c095a61de145a689ee516b291391823a Mon Sep 17 00:00:00 2001
From: Mikolaj <mikolaj.konarski@gmail.com>
Date: Fri, 8 Jul 2011 21:56:44 +0200
Subject: [PATCH 7/7] add 6 log events of the fine-grained spark class

---
 includes/rts/EventLogFormat.h |    8 +++++++-
 rts/Capability.c              |    4 ++++
 rts/Sparks.c                  |   11 ++++++++++-
 rts/Trace.c                   |    3 +++
 rts/Trace.h                   |   37 +++++++++++++++++++++++++++++++++----
 rts/eventlog/EventLog.c       |   14 +++++++++++++-
 6 files changed, 70 insertions(+), 7 deletions(-)

diff --git a/includes/rts/EventLogFormat.h b/includes/rts/EventLogFormat.h
index e4c6c85..c0d32db 100644
--- a/includes/rts/EventLogFormat.h
+++ b/includes/rts/EventLogFormat.h
@@ -134,6 +134,12 @@
 #define EVENT_OSPROCESS_PID       32 /* (capset, pid)          */
 #define EVENT_OSPROCESS_PPID      33 /* (capset, parent_pid)   */
 #define EVENT_SPARK_COUNTERS      34 /* (crt,dud,ovf,cnv,fiz,gcd,rem) */
+#define EVENT_SPARK_CREATE        35 /* ()                     */
+#define EVENT_SPARK_DUD           36 /* ()                     */
+#define EVENT_SPARK_OVERFLOW      37 /* ()                     */
+#define EVENT_SPARK_CONVERT       38 /* ()                     */
+#define EVENT_SPARK_FIZZLE        39 /* ()                     */
+#define EVENT_SPARK_GC            40 /* ()                     */
 
 
 /* Range 34 - 59 is available for new events */
@@ -147,7 +153,7 @@
  * ranges higher than this are reserved but not currently emitted by ghc.
  * This must match the size of the EventDesc[] array in EventLog.c
  */
-#define NUM_EVENT_TAGS            35
+#define NUM_EVENT_TAGS            41
 
 #if 0  /* DEPRECATED EVENTS: */
 /* ghc changed how it handles sparks so these are no longer applicable */
diff --git a/rts/Capability.c b/rts/Capability.c
index 2d11ecc..1e4ba6f 100644
--- a/rts/Capability.c
+++ b/rts/Capability.c
@@ -95,10 +95,12 @@ findSpark (Capability *cap)
       spark = tryStealSpark(cap->sparks);
       while (spark != NULL && fizzledSpark(spark)) {
           cap->spark_stats.fizzled++;
+          traceEventSparkFizzle(cap);
           spark = tryStealSpark(cap->sparks);
       }
       if (spark != NULL) {
           cap->spark_stats.converted++;
+          traceEventSparkConvert(cap);
 
           // Post event for running a spark from capability's own pool.
           traceEventRunSpark(cap, cap->r.rCurrentTSO);
@@ -128,6 +130,7 @@ findSpark (Capability *cap)
           spark = tryStealSpark(robbed->sparks);
           while (spark != NULL && fizzledSpark(spark)) {
               cap->spark_stats.fizzled++;
+              traceEventSparkFizzle(cap);
               spark = tryStealSpark(robbed->sparks);
           }
           if (spark == NULL && !emptySparkPoolCap(robbed)) {
@@ -138,6 +141,7 @@ findSpark (Capability *cap)
 
           if (spark != NULL) {
               cap->spark_stats.converted++;
+              traceEventSparkConvert(cap);
 
               traceEventStealSpark(cap, cap->r.rCurrentTSO, robbed->no);
 
diff --git a/rts/Sparks.c b/rts/Sparks.c
index 2ff15dd..0769b58 100644
--- a/rts/Sparks.c
+++ b/rts/Sparks.c
@@ -61,13 +61,16 @@ newSpark (StgRegTable *reg, StgClosure *p)
 
     if (!fizzledSpark(p)) {
         if (pushWSDeque(pool,p)) {
-           cap->spark_stats.created++;
+            cap->spark_stats.created++;
+            traceEventSparkCreate(cap);
         } else {
             /* overflowing the spark pool */
             cap->spark_stats.overflowed++;
+            traceEventSparkOverflow(cap);
 	}
     } else {
         cap->spark_stats.dud++;
+        traceEventSparkDud(cap);
     }
 
     return 1;
@@ -174,6 +177,7 @@ pruneSparkQueue (Capability *cap)
           // robustness.
           pruned_sparks++;
           cap->spark_stats.fizzled++;
+          traceEventSparkFizzle(cap);
       } else {
           info = spark->header.info;
           if (IS_FORWARDING_PTR(info)) {
@@ -186,6 +190,7 @@ pruneSparkQueue (Capability *cap)
               } else {
                   pruned_sparks++; // discard spark
                   cap->spark_stats.fizzled++;
+                  traceEventSparkFizzle(cap);
               }
           } else if (HEAP_ALLOCED(spark)) {
               if ((Bdescr((P_)spark)->flags & BF_EVACUATED)) {
@@ -196,10 +201,12 @@ pruneSparkQueue (Capability *cap)
                   } else {
                       pruned_sparks++; // discard spark
                       cap->spark_stats.fizzled++;
+                      traceEventSparkFizzle(cap);
                   }
               } else {
                   pruned_sparks++; // discard spark
                   cap->spark_stats.gcd++;
+                  traceEventSparkGC(cap);
               }
           } else {
               if (INFO_PTR_TO_STRUCT(info)->type == THUNK_STATIC) {
@@ -210,10 +217,12 @@ pruneSparkQueue (Capability *cap)
                   } else {
                       pruned_sparks++; // discard spark
                       cap->spark_stats.gcd++;
+                      traceEventSparkGC(cap);
                   }
               } else {
                   pruned_sparks++; // discard spark
                   cap->spark_stats.fizzled++;
+                  traceEventSparkFizzle(cap);
               }
           }
       }
diff --git a/rts/Trace.c b/rts/Trace.c
index ee961d8..e2fa4c8 100644
--- a/rts/Trace.c
+++ b/rts/Trace.c
@@ -97,6 +97,9 @@ void initTracing (void)
         RtsFlags.TraceFlags.sparks ||
         RtsFlags.DebugFlags.sparks;
 
+    TRACE_spark_fine =
+        RtsFlags.TraceFlags.sparks_fine;
+
     eventlog_enabled = RtsFlags.TraceFlags.tracing == TRACE_EVENTLOG;
 
     /* Note: we can have TRACE_sched or TRACE_spark turned on even when
diff --git a/rts/Trace.h b/rts/Trace.h
index ad62f2b..7b1efa3 100644
--- a/rts/Trace.h
+++ b/rts/Trace.h
@@ -100,9 +100,9 @@ void traceEnd (void);
         traceSchedEvent_(cap, tag, tso, other, 0); \
     }
 
-#define traceSparkFineEvent(cap, tag, tso, other)   \
-    if (RTS_UNLIKELY(TRACE_spark_fine)) {            \
-        traceSchedEvent_(cap, tag, tso, other, 0); \
+#define traceSparkFineEvent(cap, tag)           \
+    if (RTS_UNLIKELY(TRACE_spark_fine)) {       \
+        traceEvent_(cap, tag);                  \
     }
 
 void traceSchedEvent_ (Capability *cap, EventTypeNum tag,
@@ -205,7 +205,7 @@ void traceSparkCounters_ (Capability *cap,
 #define traceSchedEvent(cap, tag, tso, other) /* nothing */
 #define traceSchedEvent2(cap, tag, tso, other, info) /* nothing */
 #define traceSparkEvent(cap, tag, tso, other) /* nothing */
-#define traceSparkFineEvent(cap, tag, tso, other) /* nothing */
+#define traceSparkFineEvent(cap, tag) /* nothing */
 #define traceEvent(cap, tag) /* nothing */
 #define traceCap(class, cap, msg, ...) /* nothing */
 #define trace(class, msg, ...) /* nothing */
@@ -519,6 +519,35 @@ INLINE_HEADER void traceSparkCounters(Capability *cap STG_UNUSED)
                         sparkPoolSize(cap->sparks));
 }
 
+INLINE_HEADER void traceEventSparkCreate(Capability *cap STG_UNUSED)
+{
+    traceSparkFineEvent(cap, EVENT_SPARK_CREATE);
+}
+
+INLINE_HEADER void traceEventSparkDud(Capability *cap STG_UNUSED)
+{
+    traceSparkFineEvent(cap, EVENT_SPARK_DUD);
+}
+
+INLINE_HEADER void traceEventSparkOverflow(Capability *cap STG_UNUSED)
+{
+    traceSparkFineEvent(cap, EVENT_SPARK_OVERFLOW);
+}
+
+INLINE_HEADER void traceEventSparkConvert(Capability *cap STG_UNUSED)
+{
+    traceSparkFineEvent(cap, EVENT_SPARK_CONVERT);
+}
+
+INLINE_HEADER void traceEventSparkFizzle(Capability *cap STG_UNUSED)
+{
+    traceSparkFineEvent(cap, EVENT_SPARK_FIZZLE);
+}
+
+INLINE_HEADER void traceEventSparkGC(Capability *cap STG_UNUSED)
+{
+    traceSparkFineEvent(cap, EVENT_SPARK_GC);
+}
 
 #include "EndPrivate.h"
 
diff --git a/rts/eventlog/EventLog.c b/rts/eventlog/EventLog.c
index 8ffefd2..183d517 100644
--- a/rts/eventlog/EventLog.c
+++ b/rts/eventlog/EventLog.c
@@ -85,7 +85,13 @@ char *EventDesc[] = {
   [EVENT_PROGRAM_ENV]         = "Program environment variables",
   [EVENT_OSPROCESS_PID]       = "Process ID",
   [EVENT_OSPROCESS_PPID]      = "Parent process ID",
-  [EVENT_SPARK_COUNTERS]      = "Spark counters"
+  [EVENT_SPARK_COUNTERS]      = "Spark counters",
+  [EVENT_SPARK_CREATE]        = "Spark create",
+  [EVENT_SPARK_DUD]           = "Spark dud",
+  [EVENT_SPARK_OVERFLOW]      = "Spark overflow",
+  [EVENT_SPARK_CONVERT]       = "Spark convert",
+  [EVENT_SPARK_FIZZLE]        = "Spark fizzle",
+  [EVENT_SPARK_GC]            = "Spark GC",
 };
 
 // Event type.
@@ -304,6 +310,12 @@ initEventLogging(void)
         case EVENT_GC_IDLE:
         case EVENT_GC_WORK:
         case EVENT_GC_DONE:
+        case EVENT_SPARK_CREATE:
+        case EVENT_SPARK_DUD:
+        case EVENT_SPARK_OVERFLOW:
+        case EVENT_SPARK_CONVERT:
+        case EVENT_SPARK_FIZZLE:
+        case EVENT_SPARK_GC:
             eventTypes[t].size = 0;
             break;
 
-- 
1.7.4.1

